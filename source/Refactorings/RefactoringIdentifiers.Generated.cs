// Copyright (c) Josef Pihrt. All rights reserved. Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

// <auto-generated>

namespace Roslynator.CSharp.Refactorings
{
    public static partial class RefactoringIdentifiers
    {
        public const string AddBraces = Prefix + "0002";
        public const string AddBracesToIfElse = Prefix + "0003";
        public const string AddBracesToSwitchSection = Prefix + "0004";
        public const string AddBracesToSwitchSections = Prefix + "0005";
        public const string AddCastExpression = Prefix + "0006";
        public const string AddDefaultValueToParameter = Prefix + "0007";
        public const string AddDefaultValueToReturnStatement = Prefix + "0008";
        public const string AddExceptionToDocumentationComment = Prefix + "0009";
        public const string AddIdentifierToVariableDeclaration = Prefix + "0010";
        public const string AddParameterNameToArgument = Prefix + "0011";
        public const string AddParameterNameToParameter = Prefix + "0012";
        public const string AddTypeParameter = Prefix + "0178";
        public const string AddUsingDirective = Prefix + "0013";
        public const string AddUsingStaticDirective = Prefix + "0014";
        public const string CallConfigureAwait = Prefix + "0015";
        public const string CallExtensionMethodAsInstanceMethod = Prefix + "0016";
        public const string CallToMethod = Prefix + "0017";
        public const string ChangeAccessibility = Prefix + "0186";
        public const string ChangeExplicitTypeToVar = Prefix + "0018";
        public const string ChangeMemberTypeAccordingToReturnExpression = Prefix + "0019";
        public const string ChangeMemberTypeAccordingToYieldReturnExpression = Prefix + "0020";
        public const string ChangeMethodReturnTypeToVoid = Prefix + "0021";
        public const string ChangeTypeAccordingToExpression = Prefix + "0022";
        public const string ChangeVarToExplicitType = Prefix + "0023";
        public const string CheckExpressionForNull = Prefix + "0024";
        public const string CheckParameterForNull = Prefix + "0025";
        public const string CollapseToInitializer = Prefix + "0026";
        public const string CommentOutMember = Prefix + "0027";
        public const string CommentOutStatement = Prefix + "0028";
        public const string CopyDocumentationCommentFromBaseMember = Prefix + "0029";
        public const string DuplicateArgument = Prefix + "0030";
        public const string DuplicateMember = Prefix + "0031";
        public const string DuplicateParameter = Prefix + "0032";
        public const string DuplicateStatement = Prefix + "0033";
        public const string ExpandAssignmentExpression = Prefix + "0034";
        public const string ExpandCoalesceExpression = Prefix + "0035";
        public const string ExpandEvent = Prefix + "0036";
        public const string ExpandExpressionBody = Prefix + "0037";
        public const string ExpandInitializer = Prefix + "0038";
        public const string ExpandLambdaExpressionBody = Prefix + "0039";
        public const string ExpandProperty = Prefix + "0040";
        public const string ExpandPropertyAndAddBackingField = Prefix + "0041";
        public const string ExtractExpressionFromCondition = Prefix + "0043";
        public const string ExtractGenericType = Prefix + "0044";
        public const string ExtractStatement = Prefix + "0045";
        public const string ExtractTypeDeclarationToNewFile = Prefix + "0046";
        public const string FormatAccessorBraces = Prefix + "0047";
        public const string FormatArgumentList = Prefix + "0048";
        public const string FormatBinaryExpression = Prefix + "0049";
        public const string FormatConditionalExpression = Prefix + "0050";
        public const string FormatConstraintClauses = Prefix + "0187";
        public const string FormatExpressionChain = Prefix + "0051";
        public const string FormatInitializer = Prefix + "0052";
        public const string FormatParameterList = Prefix + "0053";
        public const string GenerateBaseConstructors = Prefix + "0054";
        public const string GenerateCombinedEnumMember = Prefix + "0055";
        public const string GenerateEnumMember = Prefix + "0056";
        public const string GenerateEnumValues = Prefix + "0057";
        public const string GenerateEventInvokingMethod = Prefix + "0058";
        public const string GenerateSwitchSections = Prefix + "0059";
        public const string ImplementIEquatableOfT = Prefix + "0179";
        public const string InitializeLocalWithDefaultValue = Prefix + "0060";
        public const string InlineAliasExpression = Prefix + "0061";
        public const string InlineConstant = Prefix + "0181";
        public const string InlineMethod = Prefix + "0062";
        public const string InlineUsingStatic = Prefix + "0180";
        public const string InsertStringInterpolation = Prefix + "0063";
        public const string IntroduceAndInitializeField = Prefix + "0064";
        public const string IntroduceAndInitializeProperty = Prefix + "0065";
        public const string IntroduceConstructor = Prefix + "0066";
        public const string IntroduceFieldToLockOn = Prefix + "0067";
        public const string IntroduceLocalVariable = Prefix + "0068";
        public const string JoinStringExpressions = Prefix + "0078";
        public const string MakeMemberAbstract = Prefix + "0069";
        public const string MakeMemberVirtual = Prefix + "0070";
        public const string MergeAssignmentExpressionWithReturnStatement = Prefix + "0073";
        public const string MergeAttributes = Prefix + "0074";
        public const string MergeIfStatements = Prefix + "0075";
        public const string MergeInterpolationIntoInterpolatedString = Prefix + "0076";
        public const string MergeLocalDeclarations = Prefix + "0077";
        public const string NegateBinaryExpression = Prefix + "0079";
        public const string NegateBooleanLiteral = Prefix + "0080";
        public const string NegateIsExpression = Prefix + "0081";
        public const string NegateOperator = Prefix + "0082";
        public const string NotifyPropertyChanged = Prefix + "0083";
        public const string ParenthesizeExpression = Prefix + "0084";
        public const string PromoteLocalToParameter = Prefix + "0085";
        public const string ReduceIfNesting = Prefix + "0189";
        public const string RemoveAllComments = Prefix + "0086";
        public const string RemoveAllCommentsExceptDocumentationComments = Prefix + "0087";
        public const string RemoveAllDocumentationComments = Prefix + "0088";
        public const string RemoveAllMemberDeclarations = Prefix + "0089";
        public const string RemoveAllPreprocessorDirectives = Prefix + "0090";
        public const string RemoveAllRegionDirectives = Prefix + "0091";
        public const string RemoveAllStatements = Prefix + "0092";
        public const string RemoveAllSwitchSections = Prefix + "0093";
        public const string RemoveBraces = Prefix + "0094";
        public const string RemoveBracesFromIfElse = Prefix + "0095";
        public const string RemoveBracesFromSwitchSection = Prefix + "0096";
        public const string RemoveBracesFromSwitchSections = Prefix + "0097";
        public const string RemoveComment = Prefix + "0098";
        public const string RemoveConditionFromLastElse = Prefix + "0099";
        public const string RemoveDirectiveAndRelatedDirectives = Prefix + "0100";
        public const string RemoveEmptyLines = Prefix + "0101";
        public const string RemoveInterpolation = Prefix + "0102";
        public const string RemoveMember = Prefix + "0103";
        public const string RemoveMemberDeclarations = Prefix + "0104";
        public const string RemoveParameterNameFromArgument = Prefix + "0105";
        public const string RemoveParentheses = Prefix + "0106";
        public const string RemovePropertyInitializer = Prefix + "0107";
        public const string RemoveRegion = Prefix + "0108";
        public const string RemoveStatement = Prefix + "0109";
        public const string RemoveStatementsFromSwitchSections = Prefix + "0110";
        public const string RenameBackingFieldAccordingToPropertyName = Prefix + "0111";
        public const string RenameIdentifierAccordingToTypeName = Prefix + "0112";
        public const string RenameMethodAccordingToTypeName = Prefix + "0113";
        public const string RenameParameterAccordingToTypeName = Prefix + "0114";
        public const string RenamePropertyAccordingToTypeName = Prefix + "0115";
        public const string ReplaceAnyWithAllOrAllWithAny = Prefix + "0116";
        public const string ReplaceAsWithCast = Prefix + "0117";
        public const string ReplaceCastWithAs = Prefix + "0118";
        public const string ReplaceConditionalExpressionWithExpression = Prefix + "0119";
        public const string ReplaceConstantWithField = Prefix + "0121";
        public const string ReplaceDoWithWhile = Prefix + "0123";
        public const string ReplaceEqualsExpressionWithStringEquals = Prefix + "0124";
        public const string ReplaceEqualsExpressionWithStringIsNullOrEmpty = Prefix + "0125";
        public const string ReplaceEqualsExpressionWithStringIsNullOrWhiteSpace = Prefix + "0126";
        public const string ReplaceExpressionWithConstantValue = Prefix + "0127";
        public const string ReplaceForEachWithFor = Prefix + "0129";
        public const string ReplaceForEachWithForAndReverseLoop = Prefix + "0188";
        public const string ReplaceForWithForEach = Prefix + "0130";
        public const string ReplaceForWithWhile = Prefix + "0131";
        public const string ReplaceHexadecimalLiteralWithDecimalLiteral = Prefix + "0132";
        public const string ReplaceIfElseWithIfReturn = Prefix + "0190";
        public const string ReplaceIfWithSwitch = Prefix + "0133";
        public const string ReplaceIncrementOperatorWithDecrementOperator = Prefix + "0134";
        public const string ReplaceInterpolatedStringWithInterpolationExpression = Prefix + "0135";
        public const string ReplaceInterpolatedStringWithStringLiteral = Prefix + "0136";
        public const string ReplaceMethodGroupWithLambda = Prefix + "0137";
        public const string ReplaceMethodWithProperty = Prefix + "0138";
        public const string ReplaceNullLiteralExpressionWithDefaultExpression = Prefix + "0139";
        public const string ReplaceObjectCreationWithDefaultValue = Prefix + "0185";
        public const string ReplacePrefixOperatorWithPostfixOperator = Prefix + "0140";
        public const string ReplacePropertyWithMethod = Prefix + "0141";
        public const string ReplaceRegularStringLiteralWithVerbatimStringLiteral = Prefix + "0142";
        public const string ReplaceStatementWithIfElse = Prefix + "0143";
        public const string ReplaceStringContainsWithStringIndexOf = Prefix + "0144";
        public const string ReplaceStringFormatWithInterpolatedString = Prefix + "0145";
        public const string ReplaceSwitchWithIfElse = Prefix + "0147";
        public const string ReplaceVerbatimStringLiteralWithRegularStringLiteral = Prefix + "0148";
        public const string ReplaceVerbatimStringLiteralWithRegularStringLiterals = Prefix + "0149";
        public const string ReplaceWhileWithDo = Prefix + "0150";
        public const string ReplaceWhileWithFor = Prefix + "0151";
        public const string ReverseForLoop = Prefix + "0152";
        public const string SimplifyIf = Prefix + "0153";
        public const string SimplifyLambdaExpression = Prefix + "0154";
        public const string SortMemberDeclarations = Prefix + "0155";
        public const string SplitAttributes = Prefix + "0156";
        public const string SplitIfStatement = Prefix + "0184";
        public const string SplitSwitchLabels = Prefix + "0157";
        public const string SplitVariableDeclaration = Prefix + "0158";
        public const string SwapExpressionsInBinaryExpression = Prefix + "0159";
        public const string SwapExpressionsInConditionalExpression = Prefix + "0160";
        public const string SwapMemberDeclarations = Prefix + "0161";
        public const string SwapStatementsInIfElse = Prefix + "0162";
        public const string Uncomment = Prefix + "0163";
        public const string UseBitwiseOperationInsteadOfCallingHasFlag = Prefix + "0164";
        public const string UseCoalesceExpressionInsteadOfIf = Prefix + "0165";
        public const string UseConditionalExpressionInsteadOfIf = Prefix + "0166";
        public const string UseConstantInsteadOfField = Prefix + "0128";
        public const string UseCSharp6DictionaryInitializer = Prefix + "0191";
        public const string UseElementAccessInsteadOfEnumerableMethod = Prefix + "0167";
        public const string UseEmptyStringLiteralInsteadOfStringEmpty = Prefix + "0168";
        public const string UseExpressionBodiedMember = Prefix + "0169";
        public const string UseIfElseInsteadOfConditionalExpression = Prefix + "0120";
        public const string UseLambdaExpressionInsteadOfAnonymousMethod = Prefix + "0170";
        public const string UseListInsteadOfYield = Prefix + "0183";
        public const string UseStringBuilderInsteadOfConcatenation = Prefix + "0182";
        public const string UseStringEmptyInsteadOfEmptyStringLiteral = Prefix + "0171";
        public const string WrapInCondition = Prefix + "0172";
        public const string WrapInElseClause = Prefix + "0173";
        public const string WrapInIfDirective = Prefix + "0174";
        public const string WrapInRegion = Prefix + "0175";
        public const string WrapInTryCatch = Prefix + "0176";
        public const string WrapInUsingStatement = Prefix + "0177";
    }
}