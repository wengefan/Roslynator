<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <MinimumVisualStudioVersion>14.0</MinimumVisualStudioVersion>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{3AD7B124-7B99-440D-84A1-858BE5AE268B}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>Roslynator.CSharp.Refactorings</RootNamespace>
    <AssemblyName>Roslynator.CSharp.Refactorings</AssemblyName>
    <ProjectTypeGuids>{786C830F-07A1-408B-BD7F-6EE04809D6DB};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
    <TargetFrameworkVersion>v5.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <CodeAnalysisRuleSet>..\global.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <CodeAnalysisRuleSet>..\global.ruleset</CodeAnalysisRuleSet>
    <AllowUnsafeBlocks>false</AllowUnsafeBlocks>
  </PropertyGroup>
  <PropertyGroup>
    <SignAssembly>true</SignAssembly>
  </PropertyGroup>
  <PropertyGroup>
    <AssemblyOriginatorKeyFile>Roslynator.CSharp.Refactorings.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="Refactorings\AddOrRemoveParameterName\AddParameterNameRefactoring.cs" />
    <Compile Include="Refactorings\AddOrRemoveParameterName\AddParameterNameRewriter.cs" />
    <Compile Include="Refactorings\AddOrRemoveParameterName\RemoveParameterNameRefactoring.cs" />
    <Compile Include="Refactorings\AddOrRemoveParameterName\RemoveParameterNameRewriter.cs" />
    <Compile Include="RefactoringIdentifiers.Deprecated.cs" />
    <Compile Include="Refactorings\AccessModifierRefactoring.cs" />
    <Compile Include="Refactorings\DeclarationPatternRefactoring.cs" />
    <Compile Include="Refactorings\FormatConstraintClausesRefactoring.cs" />
    <Compile Include="Refactorings\InlineConstantRefactoring.cs" />
    <Compile Include="Refactorings\InlineMethod\AbstractInlineMethodRefactoring.cs" />
    <Compile Include="Refactorings\InlineMethod\InlineMethodExpressionRefactoring.cs" />
    <Compile Include="Refactorings\InlineMethod\InlineMethodRewriter.cs" />
    <Compile Include="Refactorings\InlineMethod\InlineMethodStatementsRefactoring.cs" />
    <Compile Include="Refactorings\InlineUsingStaticRefactoring.cs" />
    <Compile Include="Refactorings\AddTypeParameterRefactoring.cs" />
    <Compile Include="RefactoringIdentifiers.cs" />
    <Compile Include="Refactorings\DeclarationExpressionRefactoring.cs" />
    <Compile Include="Refactorings\ChangeDeclarationExpressionTypeRefactoring.cs" />
    <Compile Include="Refactorings\ClassDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\DelegateDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\EnumDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\ImplementIEquatableOfTRefactoring.cs" />
    <Compile Include="Refactorings\InterfaceDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\LocalFunctionStatementRefactoring.cs" />
    <Compile Include="Refactorings\MakeMemberAbstract\MakeIndexerAbstractRefactoring.cs" />
    <Compile Include="Refactorings\MakeMemberAbstract\MakeMethodAbstractRefactoring.cs" />
    <Compile Include="Refactorings\MakeMemberAbstract\MakePropertyAbstractRefactoring.cs" />
    <Compile Include="Refactorings\MakeMemberVirtual\MakeIndexerVirtualRefactoring.cs" />
    <Compile Include="Refactorings\MakeMemberVirtual\MakeMemberAbstractHelper.cs" />
    <Compile Include="Refactorings\MakeMemberVirtual\MakeMethodVirtualRefactoring.cs" />
    <Compile Include="Refactorings\MakeMemberVirtual\MakePropertyVirtualRefactoring.cs" />
    <Compile Include="Refactorings\NamespaceDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\GenerateCombinedEnumMemberRefactoring.cs" />
    <Compile Include="Refactorings\GenerateEnumMemberRefactoring.cs" />
    <Compile Include="Refactorings\EnumMemberDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\GenerateEnumValuesRefactoring.cs" />
    <Compile Include="Refactorings\DestructorDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\CastExpressionRefactoring.cs" />
    <Compile Include="Refactorings\CheckExpressionForNullRefactoring.cs" />
    <Compile Include="Refactorings\ExpandPropertyAndAddBackingFieldRefactoring.cs" />
    <Compile Include="Refactorings\ExpandPropertyRefactoring.cs" />
    <Compile Include="Refactorings\ExtractCondition\ExtractConditionRefactoring.cs" />
    <Compile Include="Refactorings\ExtractCondition\ExtractConditionFromIfToNestedIfRefactoring.cs" />
    <Compile Include="Refactorings\ExtractCondition\ExtractConditionFromIfToIfRefactoring.cs" />
    <Compile Include="Refactorings\ConstructorDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\LockStatementRefactoring.cs" />
    <Compile Include="Refactorings\CopyDocumentationCommentFromBaseMemberRefactoring.cs" />
    <Compile Include="Refactorings\GenerateOnEventMethodRefactoring.cs" />
    <Compile Include="Refactorings\CallToMethodRefactoring.cs" />
    <Compile Include="Refactorings\EventDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\InlineMethod\ParameterInfo.cs" />
    <Compile Include="Refactorings\InterpolationRefactoring.cs" />
    <Compile Include="Refactorings\AttributeListRefactoring.cs" />
    <Compile Include="RefactoringIdentifiers.Generated.cs" />
    <Compile Include="Refactorings\ExtractTypeDeclarationToNewFileRefactoring.cs" />
    <Compile Include="Refactorings\MergeLocalDeclarationsRefactoring.cs" />
    <Compile Include="Refactorings\JoinStringExpressionsRefactoring.cs" />
    <Compile Include="Refactorings\NegateIsExpressionRefactoring.cs" />
    <Compile Include="Refactorings\PlusTokenRefactoring.cs" />
    <Compile Include="Refactorings\RemoveConditionFromLastElseRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceEqualsExpression\ReplaceEqualsExpressionRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceEqualsExpression\ReplaceEqualsExpressionWithStringIsNullOrEmptyRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceEqualsExpression\ReplaceEqualsExpressionWithStringIsNullOrWhiteSpaceRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceIfElseWithIfReturnRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceInterpolatedStringWithInterpolationExpressionRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceObjectCreationWithDefaultValueRefactoring.cs" />
    <Compile Include="Refactorings\ReplacePropertyWithMethod\ReplacePropertyWithMethodSyntaxRewriter.cs" />
    <Compile Include="Refactorings\ReplaceStatementWithIf\ReplaceReturnStatementWithIfStatementRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceStatementWithIf\ReplaceStatementWithIfStatementRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceStatementWithIf\ReplaceYieldStatementWithIfStatementRefactoring.cs" />
    <Compile Include="Refactorings\SelectedStatementsRefactoring.cs" />
    <Compile Include="Refactorings\ExtractCondition\ExtractConditionRefactoring`1.cs" />
    <Compile Include="Refactorings\PromoteLocalToParameterRefactoring.cs" />
    <Compile Include="Refactorings\IntroduceAndInitialize\IntroduceAndInitializeFieldInfo.cs" />
    <Compile Include="Refactorings\IntroduceAndInitialize\IntroduceAndInitializeInfo.cs" />
    <Compile Include="Refactorings\IntroduceAndInitialize\IntroduceAndInitializePropertyInfo.cs" />
    <Compile Include="Refactorings\IntroduceAndInitialize\IntroduceAndInitializeRefactoring.cs" />
    <Compile Include="Refactorings\NodeInList\DuplicateArgumentOrParameterRefactoring.cs" />
    <Compile Include="Refactorings\NodeInList\NodeInListRefactoring.cs" />
    <Compile Include="Refactorings\IntroduceAndInitialize\IntroduceAndInitializePropertyRefactoring.cs" />
    <Compile Include="Refactorings\IntroduceAndInitialize\IntroduceAndInitializeFieldRefactoring.cs" />
    <Compile Include="Refactorings\NodeInList\RewriterInfo.cs" />
    <Compile Include="Refactorings\ReplaceConditionalExpressionWithExpressionRefactoring.cs" />
    <Compile Include="Refactorings\ExtractCondition\ExtractConditionFromWhileToNestedIfRefactoring.cs" />
    <Compile Include="Refactorings\SelectedSwitchSectionsRefactoring.cs" />
    <Compile Include="Refactorings\SemicolonTokenRefactoring.cs" />
    <Compile Include="Refactorings\SortMemberDeclarations\SortMemberDeclarationsRewriter.cs" />
    <Compile Include="Refactorings\SplitIfStatementRefactoring.cs" />
    <Compile Include="Refactorings\ThrowExpressionRefactoring.cs" />
    <Compile Include="Refactorings\TypeParameterConstraintClauseRefactoring.cs" />
    <Compile Include="Refactorings\UseCSharp6DictionaryInitializerRefactoring.cs" />
    <Compile Include="Refactorings\UseStringBuilderInsteadOfConcatenationRefactoring.cs" />
    <Compile Include="Refactorings\UseListInsteadOfYieldRefactoring.cs" />
    <Compile Include="Refactorings\WrapSelectedLines\WrapInIfDirectiveRefactoring.cs" />
    <Compile Include="Refactorings\AddUsingDirectiveRefactoring.cs" />
    <Compile Include="Refactorings\CollapseToInitializerRefactoring.cs" />
    <Compile Include="Refactorings\MergeAssignmentExpressionWithReturnStatementRefactoring.cs" />
    <Compile Include="Refactorings\QualifiedNameRefactoring.cs" />
    <Compile Include="Refactorings\WrapSelectedLines\WrapSelectedLinesRefactoring.cs" />
    <Compile Include="Refactorings\WrapSelectedLines\SelectedLinesRefactoring.cs" />
    <Compile Include="Refactorings\WrapSelectedLines\WrapInRegionRefactoring.cs" />
    <Compile Include="Refactorings\AwaitExpressionRefactoring.cs" />
    <Compile Include="Refactorings\BlockRefactoring.cs" />
    <Compile Include="Refactorings\DirectiveTriviaRefactoring.cs" />
    <Compile Include="Refactorings\MergeIfStatementsRefactoring.cs" />
    <Compile Include="Refactorings\RemoveStatementsFromSwitchSectionsRefactoring.cs" />
    <Compile Include="Refactorings\AddDefaultValueToReturnStatementRefactoring.cs" />
    <Compile Include="Refactorings\InlineMethod\InlineMethodRefactoring.cs" />
    <Compile Include="Refactorings\ReturnExpressionRefactoring.cs" />
    <Compile Include="Refactorings\ExtractCondition\ExtractConditionFromIfRefactoring.cs" />
    <Compile Include="Refactorings\WrapStatements\WrapStatementsRefactoring.cs" />
    <Compile Include="Refactorings\WrapStatements\WrapInIfStatementRefactoring.cs" />
    <Compile Include="Refactorings\WrapStatements\WrapInTryCatchRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceStatementWithIf\ReplaceStatementWithIfStatementRefactoring`1.cs" />
    <Compile Include="Refactorings\RemoveEmptyLinesRefactoring.cs" />
    <Compile Include="Refactorings\SyntaxNodeRefactoring.cs" />
    <Compile Include="Refactorings\AddDefaultValueToParameterRefactoring.cs" />
    <Compile Include="Refactorings\AnonymousMethodExpressionRefactoring.cs" />
    <Compile Include="Refactorings\AttributeArgumentParameterNameRefactoring.cs" />
    <Compile Include="Refactorings\AttributeArgumentListRefactoring.cs" />
    <Compile Include="Refactorings\CommentOutRefactoring.cs" />
    <Compile Include="Refactorings\DuplicateAttributeArgumentRefactoring.cs" />
    <Compile Include="Refactorings\CaseSwitchLabelRefactoring.cs" />
    <Compile Include="Refactorings\EventFieldDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\AddIdentifierToLocalDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\ExpressionStatementRefactoring.cs" />
    <Compile Include="Refactorings\RemoveAllMemberDeclarationsRefactoring.cs" />
    <Compile Include="Refactorings\ReverseReversedForLoopRefactoringy.cs" />
    <Compile Include="Refactorings\StatementRefactoring.cs" />
    <Compile Include="Refactorings\ElseClauseRefactoring.cs" />
    <Compile Include="Refactorings\AddUsingStaticDirectiveRefactoring.cs" />
    <Compile Include="Refactorings\IndexerDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\ChangeMethodReturnTypeToVoidRefactoring.cs" />
    <Compile Include="Refactorings\MethodDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceWhileWithDoRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceDoWithWhileRefactoring.cs" />
    <Compile Include="Refactorings\ChangeVariableDeclarationTypeRefactoring.cs" />
    <Compile Include="Refactorings\InitializeLocalWithDefaultValueRefactoring.cs" />
    <Compile Include="Refactorings\WrapStatements\WrapInUsingStatementRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceStringLiteralRefactoring.cs" />
    <Compile Include="Refactorings\RemovePropertyInitializerRefactoring.cs" />
    <Compile Include="Refactorings\AddOrRemoveParameterName\AddOrRemoveParameterNameRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceConstantWithFieldRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceMethodWithProperty\ReplaceMethodWithPropertyRefactoring.cs" />
    <Compile Include="Refactorings\ReplacePropertyWithMethod\ReplacePropertyWithMethodRefactoring.cs" />
    <Compile Include="Refactorings\ExtractExpressionFromParenthesesRefactoring.cs" />
    <Compile Include="Refactorings\ExtractGenericTypeRefactoring.cs" />
    <Compile Include="Refactorings\LambdaExpressionRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceAnyWithAllOrAllWithAnyRefactoring.cs" />
    <Compile Include="Refactorings\NegateBinaryExpressionRefactoring.cs" />
    <Compile Include="Refactorings\NegateBooleanLiteralRefactoring.cs" />
    <Compile Include="Refactorings\RemoveBracesFromSwitchSectionRefactoring.cs" />
    <Compile Include="Refactorings\RemoveBracesFromSwitchSectionsRefactoring.cs" />
    <Compile Include="Refactorings\AddBracesToSwitchSectionsRefactoring.cs" />
    <Compile Include="Refactorings\InsertInterpolationRefactoring.cs" />
    <Compile Include="Refactorings\DefaultCodeRefactoringProvider.cs" />
    <Compile Include="Refactorings\ParenthesizeExpressionRefactoring.cs" />
    <Compile Include="Refactorings\InterpolatedStringTextRefactoring.cs" />
    <Compile Include="Refactorings\RemoveAllStatementsRefactoring.cs" />
    <Compile Include="Refactorings\RefactoringContext.cs" />
    <Compile Include="Refactorings\InterpolatedStringRefactoring.cs" />
    <Compile Include="Refactorings\GenerateSwitchSectionsRefactoring.cs" />
    <Compile Include="Refactorings\YieldStatementRefactoring.cs" />
    <Compile Include="Refactorings\ReturnStatementRefactoring.cs" />
    <Compile Include="Refactorings\ExpandLambdaExpressionBodyRefactoring.cs" />
    <Compile Include="Refactorings\InitializerExpressionRefactoring.cs" />
    <Compile Include="Refactorings\BinaryExpressionRefactoring.cs" />
    <Compile Include="Refactorings\FieldDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\GenericNameRefactoring.cs" />
    <Compile Include="Refactorings\IdentifierNameRefactoring.cs" />
    <Compile Include="Refactorings\IntroduceConstructorRefactoring.cs" />
    <Compile Include="Refactorings\InvocationExpressionRefactoring.cs" />
    <Compile Include="Refactorings\LocalDeclarationStatementRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceStringFormatWithInterpolatedStringRefactoring.cs" />
    <Compile Include="Refactorings\DoStatementRefactoring.cs" />
    <Compile Include="Refactorings\ArrowExpressionClauseRefactoring.cs" />
    <Compile Include="Refactorings\ForStatementRefactoring.cs" />
    <Compile Include="Refactorings\SimpleMemberAccessExpressionRefactoring.cs" />
    <Compile Include="Refactorings\ParenthesizedExpressionRefactoring.cs" />
    <Compile Include="Refactorings\IfStatementRefactoring.cs" />
    <Compile Include="Refactorings\RegionDirectiveTriviaRefactoring.cs" />
    <Compile Include="Refactorings\ExpressionRefactoring.cs" />
    <Compile Include="Refactorings\SwapExpressionsInConditionalExpressionRefactoring.cs" />
    <Compile Include="Refactorings\SwapStatementInIfElseRefactoring.cs" />
    <Compile Include="Refactorings\UncommentRefactoring.cs" />
    <Compile Include="Refactorings\AddBracesRefactoring.cs" />
    <Compile Include="Refactorings\CheckParameterForNullRefactoring.cs" />
    <Compile Include="Refactorings\ArgumentRefactoring.cs" />
    <Compile Include="Refactorings\AccessorDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\AssignmentExpressionRefactoring.cs" />
    <Compile Include="Refactorings\NodeInList\DuplicateArgumentRefactoring.cs" />
    <Compile Include="Refactorings\ExpandInitializerRefactoring.cs" />
    <Compile Include="Refactorings\NotifyPropertyChangedRefactoring.cs" />
    <Compile Include="Refactorings\UseElementAccessInsteadOfEnumerableMethodRefactoring.cs" />
    <Compile Include="Refactorings\NodeInList\DuplicateParameterRefactoring.cs" />
    <Compile Include="Refactorings\ExpandCoalesceExpressionRefactoring.cs" />
    <Compile Include="Refactorings\ExpandEventRefactoring.cs" />
    <Compile Include="Refactorings\PropertyDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\StringLiteralExpressionRefactoring.cs" />
    <Compile Include="Refactorings\FormatExpressionChainRefactoring.cs" />
    <Compile Include="Refactorings\ExtractStatementRefactoring.cs" />
    <Compile Include="Refactorings\FormatBinaryExpressionRefactoring.cs" />
    <Compile Include="Refactorings\RemoveBracesRefactoring.cs" />
    <Compile Include="Refactorings\AddOrRenameParameterRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceSwitchWithIfElseRefactoring.cs" />
    <Compile Include="Refactorings\CloseParenTokenRefactoring.cs" />
    <Compile Include="Refactorings\PostfixUnaryExpressionRefactoring.cs" />
    <Compile Include="Refactorings\PrefixUnaryExpressionRefactoring.cs" />
    <Compile Include="Refactorings\CommaTokenRefactoring.cs" />
    <Compile Include="Refactorings\CommentTriviaRefactoring.cs" />
    <Compile Include="Refactorings\ParameterRefactoring.cs" />
    <Compile Include="Refactorings\LiteralExpressionRefactoring.cs" />
    <Compile Include="Refactorings\VariableDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\NegateOperatorRefactoring.cs" />
    <Compile Include="Refactorings\UsingStatementRefactoring.cs" />
    <Compile Include="Refactorings\WhileStatementRefactoring.cs" />
    <Compile Include="Refactorings\ForEachStatementRefactoring.cs" />
    <Compile Include="Refactorings\ParameterListRefactoring.cs" />
    <Compile Include="Refactorings\ArgumentListRefactoring.cs" />
    <Compile Include="Refactorings\ConditionalExpressionRefactoring.cs" />
    <Compile Include="Refactorings\SwitchStatementRefactoring.cs" />
    <Compile Include="Refactorings\SwitchSectionRefactoring.cs" />
    <Compile Include="Refactorings\UseIfElseInsteadOfConditionalExpressionRefactoring.cs" />
    <Compile Include="Refactorings\ReverseForLoopRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceForWithForEachRefactoring.cs" />
    <Compile Include="Refactorings\SwapExpressionsInBinaryExpressionRefactoring.cs" />
    <Compile Include="Refactorings\MemberDeclarationsRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceMethodWithProperty\ReplaceMethodWithPropertySyntaxRewriter.cs" />
    <Compile Include="Refactorings\ReplaceNullLiteralExpressionWithDefaultExpressionRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceExpressionWithConstantValueRefactoring.cs" />
    <Compile Include="Refactorings\RemoveAllPreprocessorDirectivesRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceIfWithSwitchRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceEqualsExpressionWithStringEqualsRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceStringContainsWithStringIndexOfRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceMethodGroupWithLambdaRefactoring.cs" />
    <Compile Include="Refactorings\SplitSwitchLabelsRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceForWithWhileRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceCastWithAsRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceWhileWithForRefactoring.cs" />
    <Compile Include="Refactorings\ReplaceHexadecimalLiteralWithDecimalLiteralRefactoring.cs" />
    <Compile Include="Refactorings\SortMemberDeclarations\SortEnumMemberDeclarationsRefactoring.cs" />
    <Compile Include="Refactorings\SortMemberDeclarations\SortMemberDeclarationsRefactoring.cs" />
    <Compile Include="Refactorings\StructDeclarationRefactoring.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Refactorings\MemberDeclarationRefactoring.cs" />
    <Compile Include="Refactorings\NodeInList\NodeSyntaxRewriter.cs" />
    <Compile Include="Refactorings\NodeInList\ParameterSyntaxRewriter.cs" />
    <Compile Include="Refactorings\NodeInList\ArgumentSyntaxRewriter.cs" />
    <Compile Include="Refactorings\ModifyExpressionRefactoring.cs" />
    <Compile Include="Refactorings\UsingDirectiveRefactoring.cs" />
    <Compile Include="Refactorings\ThrowStatementRefactoring.cs" />
    <Compile Include="Refactorings\WrapInElseClauseRefactoring.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="app.config" />
    <None Include="project.json" />
    <None Include="Roslynator.CSharp.Refactorings.snk" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Common\Common.csproj">
      <Project>{814c7bd5-f7fa-441d-897f-f7876b038b30}</Project>
      <Name>Common</Name>
    </ProjectReference>
    <ProjectReference Include="..\Core\Core.csproj">
      <Project>{34a3e42e-2254-4ee7-a152-eedb18e3d7e3}</Project>
      <Name>Core</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <Content Include="Refactorings.xml">
      <SubType>Designer</SubType>
    </Content>
  </ItemGroup>
  <ItemGroup />
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.CSharp.targets" />
  <Target Name="AfterBuild">
    <GetAssemblyIdentity AssemblyFiles="$(OutDir)\$(AssemblyName).dll">
      <Output TaskParameter="Assemblies" ItemName="AnalyzerAssemblyInfo" />
    </GetAssemblyIdentity>
  </Target>
  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
       Other similar extension points exist, see Microsoft.Common.targets.
  <Target Name="BeforeBuild">
  </Target>
  <Target Name="AfterBuild">
  </Target>
  -->
</Project>